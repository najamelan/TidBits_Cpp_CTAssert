

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head><meta name="robots" content="index,follow" />
<meta name="keywords" content="C# / .NET / Coding, Tech, Software, Technology" />
<meta name="GENERATOR" content="Telligent Community 1.5.134.12674 (Build: 5.5.134.12674)" />
<link rel="pingback" href="http://blogs.msdn.com/b/abhinaba/pingback.aspx" />
<link rel="alternate" type="application/rss+xml" title="Site Home (RSS 2.0)" href="http://blogs.msdn.com/rss.aspx"  />
<link rel="alternate" type="application/rss+xml" title="abhinaba&#39;s Comments (RSS 2.0)" href="/members/abhinaba/comments/rss.aspx"  />
<link rel="alternate" type="application/rss+xml" title="abhinaba&#39;s Activities (RSS 2.0)" href="/members/abhinaba/activities/rss.aspx"  />
<link rel="alternate" type="application/rss+xml" title="Activities of People abhinaba Follows (RSS 2.0)" href="/members/abhinaba/activities/followersrss.aspx"  />
<link rel="alternate" type="application/rss+xml" title="abhinaba&#39;s Groups Activities (RSS 2.0)" href="/members/abhinaba/activities/groupsrss.aspx"  />
<link rel="alternate" type="application/rss+xml" title="I know the answer (it&#39;s 42) (RSS 2.0)" href="http://blogs.msdn.com/b/abhinaba/rss.aspx"  />
<link rel="alternate" type="application/atom+xml" title="I know the answer (it&#39;s 42) (Atom 1.0)" href="http://blogs.msdn.com/b/abhinaba/atom.aspx"  />
<link rel="alternate" type="application/rss+xml" title="I know the answer (it&#39;s 42) - All Comments (RSS 2.0)" href="http://blogs.msdn.com/b/abhinaba/rsscomments.aspx"  />
<link rel="alternate" type="application/rss+xml" title="C/C++ Compile Time Asserts - Comments for this post (RSS 2.0)" href="http://blogs.msdn.com/b/abhinaba/rsscomments.aspx?WeblogPostID=9014658"  />

            <link rel="stylesheet" href="/themes/generic/css/layout.css" type="text/css" media="screen" />
        
         
          <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
          <link rel="shortcut icon" type="image/ico" href="/themes/MSDN/favicon.ico" />
          <link type="text/css" rel="stylesheet" href="/themes/MSDN/css/screen.css" media="screen,print" />
          <link type="text/css" rel="stylesheet" href="/themes/blogs/MSDN/css/MSDNblogs.css" media="screen,print" />
        
          <link type="text/css" rel="stylesheet" href="/themes/MSDN/css/DynamicStyle.aspx?PreviewKey=0" media="screen,print" />
          <link type="text/css" rel="stylesheet" href="/themes/groups/MSDN/css/DynamicStyle.aspx?WeblogID=4203&AppType=Weblog&PreviewKey=0" media="screen,print" />
          <link type="text/css" rel="stylesheet" href="/themes/blogs/MSDN/css/DynamicStyle.aspx?WeblogID=4203&PreviewKey=0" media="screen,print" />
        
          <!--[if lte IE 6]>
              <link type="text/css" rel="stylesheet" href="/themes/MSDN/css/ie6.css" media="screen,print" />
          <![endif]-->
          <link type="text/css" rel="stylesheet" href="/themes/MSDN/css/print.css" media="print" />
        <script language="javascript" type="text/javascript" src="http://analytics.live.com/Analytics/msAnalytics.js"></script>
<script language="javascript" type="text/javascript">
	msAnalytics.ProfileId = 'D150';
	msAnalytics.TrackPage();
</script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://blogs.msdn.com/b/abhinaba/rsd.ashx" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" title="WLWManifest" href="http://blogs.msdn.com/b/abhinaba/wlwmanifest.ashx" />
<title>
	C/C++ Compile Time Asserts - I know the answer (it&#39;s 42) - Site Home - MSDN Blogs
</title></head>
	<body spellcheck="true">
		<form name="aspnetForm" method="post" action="/b/abhinaba/archive/2008/10/27/c-c-compile-time-asserts.aspx?CommentPosted=true" onsubmit="javascript:return WebForm_OnSubmit();" id="aspnetForm">


<div class="content-fragment-page post" id="ctl00_content_ctl00_page"><div class="layout"><div class="layout-content content-left-sidebar-right" id="ctl00_content_ctl00_layout"><div class="layout-region right-sidebar" id="ctl00_content_ctl00_right-sidebar"><div class="layout-region-inner right-sidebar"><div class="content-fragment blog-archive-list no-wrapper-with-spacing with-header" id="fragment-32166"><div class="content-fragment-inner fiji-content-fragment-inner">
  <div class="content-fragment-footer"></div>
<div class="content-fragment-bottom fiji-content-fragment-bottom"><div class="r1 fiji-r1"></div><div class="r2 fiji-r2"></div><div class="r3 fiji-r3"></div><div class="r4 fiji-r4"></div></div></div></div>
</div>
</div>
<div class="layout-region content" id="ctl00_content_ctl00_content">
<div class="layout-region-inner content"><div class="content-fragment blog-title full-border" id="fragment-32167">
<div class="content-fragment-inner fiji-content-fragment-inner"><div class="content-fragment-top fiji-content-fragment-top"><div class="r1 fiji-r1"></div><div class="r2 fiji-r2"></div><div class="r3 fiji-r3"></div><div class="r4 fiji-r4"></div></div><div class="content-fragment-content">
<h1 class="title">
	    
			        
			    
	                C/C++ Compile Time Asserts
			    
	</h1></div>
<div class="content-fragment-footer"></div>
<div class="content-fragment-bottom fiji-content-fragment-bottom"><div class="r1 fiji-r1"></div><div class="r2 fiji-r2"></div><div class="r3 fiji-r3"></div><div class="r4 fiji-r4"></div></div></div></div>
<div class="content-fragment blog-bread-crumbs no-wrapper" id="fragment-32168">
<div class="content-fragment-inner fiji-content-fragment-inner"><div class="content-fragment-top fiji-content-fragment-top"><div class="r1 fiji-r1"></div><div class="r2 fiji-r2"></div><div class="r3 fiji-r3"></div><div class="r4 fiji-r4"></div></div><div class="content-fragment-content">


<div class="breadcrumb-list-header"></div>
<div class="breadcrumb-list">
	<span class="breadcrumb-item"><a class="internal-link view-home" href="/">MSDN Blogs</a></span>
  
	

	
			<span class="separator"> > </span>
			<span class="breadcrumb-item">
		<a href="/b/abhinaba/">I know the answer (it&#39;s 42)</a>
			</span>
		
	
	
			<span class="separator"> > </span>
			<span class="breadcrumb-item">
		<a href="/b/abhinaba/archive/2008/10/27/c-c-compile-time-asserts.aspx">C/C++ Compile Time Asserts</a>
			</span>
		

	
</div>
<div class="breadcrumb-list-footer"></div>
</div>
<div class="content-fragment-footer"></div>
<div class="content-fragment-bottom fiji-content-fragment-bottom"><div class="r1 fiji-r1"></div><div class="r2 fiji-r2"></div><div class="r3 fiji-r3"></div><div class="r4 fiji-r4"></div></div></div></div>
<div class="content-fragment blog-post no-wrapper" id="fragment-32169">
<div class="content-fragment-inner fiji-content-fragment-inner"><div class="content-fragment-top fiji-content-fragment-top"><div class="r1 fiji-r1"></div><div class="r2 fiji-r2"></div><div class="r3 fiji-r3"></div><div class="r4 fiji-r4"></div></div><div class="content-fragment-content">


<div class="full-post-header"></div>
<div class="full-post">
	<h3 class="post-name">C/C++ Compile Time Asserts</h3>
	
    <div class="post-author"><span class="user-name"><a class="internal-link view-user-profile" href="/members/abhinaba/"><span></span>abhinaba</a></span>    </div>
    <div class="post-date">
        <span class="value">
            27 Oct 2008 12:42 AM
        </span>
    </div>
    <div class="post-attributes">
        <div class="attribute-list-header"></div>
        <div class="attribute-list-footer"></div>
    </div>
    <div class="post-content user-defined-markup">
      <p><strong>The Problem</strong></p>  <p>Run time asserts are fairly commonly used in C++. As the MSDN documentation for <a href="http://msdn.microsoft.com/en-us/library/9sb57dw4.aspx">assert</a> states</p>  <p>&quot;<em>(assert) Evaluates an expression and, when the result is false, prints a diagnostic message and aborts the program.</em>&quot;</p>  <p>There is another type of asserts which can be used to catch code issues right at the time of compilation. These are called static or compile-time asserts. These asserts can be used to do compile time validations and are very effectively used in the .NET Compact Framework code base.</p>  <p>E.g. you have two types Foo and Bar and your code assumes (may be for a reinterpret_cast) that they are of the same size. Now being in separate places there is always a possibility that someone modifies one without changing the other and that results in some weird bugs. How do you express this assumption in code? Obviously you can do a run-time check like</p>  <pre class="code">assert(sizeof(foo) == sizeof(bar));</pre>

<p>If that code is not hit during running this assert will not get fired. This might be caught in testing later. However, if you notice carefully all of the information is available during compilation (both the type and the sizeof is resolved while compilation). So we should be able to do compile time validation, with-something to the effect</p>

<pre class="code">COMPILE_ASSERT(sizeof(int) == sizeof(char));</pre>

<p>This should be tested during compilation and hence whether the code is run or not the assert should fail.</p>

<p><strong>The Solution</strong></p>

<p>There are many ways to get this done. I will discuss two quick ways</p>

<p><strong>Array creation</strong></p>

<p>You can create a MACRO expression as follows</p>

<pre class="code"><span style="background: black; color: blue">#define </span><span style="background: black; color: white">COMPILE_ASSERT</span><span style="background: black; color: cyan">(</span><span style="background: black; color: white">x</span><span style="background: black; color: cyan">) </span><span style="background: black; color: #9595ff">extern int </span><span style="background: black; color: white">__dummy</span><span style="background: black; color: cyan">[(</span><span style="background: black; color: #9595ff">int</span><span style="background: black; color: cyan">)</span><span style="background: black; color: white">x</span><span style="background: black; color: cyan">]</span></pre>
<a href="http://11011.net/software/vspaste"></a>

<p>This macro works as follows</p>

<pre class="code"><span style="background: black; color: #00c100">// compiles fine 
</span><span style="background: black; color: white">COMPILE_ASSERT</span><span style="background: black; color: cyan">(</span><span style="background: black; color: #9595ff">sizeof</span><span style="background: black; color: cyan">(</span><span style="background: black; color: #9595ff">int</span><span style="background: black; color: cyan">) == </span><span style="background: black; color: #9595ff">sizeof</span><span style="background: black; color: cyan">(</span><span style="background: black; color: #9595ff">unsigned</span><span style="background: black; color: cyan">)); 
</span><span style="background: black; color: #00c100">// error C2466: cannot allocate an array of constant size 0<br /></span><span style="background: black; color: white">COMPILE_ASSERT</span><span style="background: black; color: cyan">(</span><span style="background: black; color: #9595ff">sizeof</span><span style="background: black; color: cyan">(</span><span style="background: black; color: #9595ff">int</span><span style="background: black; color: cyan">) == </span><span style="background: black; color: #9595ff">sizeof</span><span style="background: black; color: cyan">(</span><span style="background: black; color: #9595ff">char</span><span style="background: black; color: cyan">)); </span></pre>

<p>The first expression gets expanded to <font face="Courier New">int __dummy[1]</font> and compiles fine, but the later expands to <font face="Courier New">int __dummy[0]</font> and fails to compile.</p>

<p>The advantage of this approach is that it works for both C and C++, however, the failure message is very confusing and doesn't indicate what the failure is for. It is left to the developer to visit the line of compilation failure to see that it's a COMPILE_ASSERT.</p>

<p><strong>sizeof on incomplete type</strong></p>

<p>This approach works using <a href="http://msdn.microsoft.com/en-us/library/c401y1kb(VS.80).aspx">explicit-specialization</a> of template types and the fact that sizeof of <a href="http://publib.boulder.ibm.com/infocenter/lnxpcomp/v8v101/index.jsp?topic=/com.ibm.xlcpp8l.doc/language/ref/cplr060.htm">incomplete types</a> fail to compile.</p>

<p>Consider the following</p>

<pre class="code"><span style="background: black; color: #9595ff">namespace </span><span style="background: black; color: white">static_assert
</span><span style="background: black; color: cyan">{
    </span><span style="background: black; color: #9595ff">template </span><span style="background: black; color: cyan">&lt;</span><span style="background: black; color: #9595ff">bool</span><span style="background: black; color: cyan">&gt; </span><span style="background: black; color: #9595ff">struct </span><span style="background: black; color: white">STATIC_ASSERT_FAILURE</span><span style="background: black; color: cyan">;
    </span><span style="background: black; color: #9595ff">template </span><span style="background: black; color: cyan">&lt;&gt; </span><span style="background: black; color: #9595ff">struct </span><span style="background: black; color: white">STATIC_ASSERT_FAILURE</span><span style="background: black; color: cyan">&lt;</span><span style="background: black; color: #9595ff">true</span><span style="background: black; color: cyan">&gt; { </span><span style="background: black; color: #9595ff">enum </span><span style="background: black; color: cyan">{ </span><span style="background: black; color: white">value </span><span style="background: black; color: cyan">= </span><span style="background: black; color: white">1 </span><span style="background: black; color: cyan">}; };</span><span style="background: black; color: cyan">
}</span></pre>

<p>Here we defined the generic type STATIC_ASSERT_FAILURE. As you see the type is incomplete (no member definition). However we do provide a <a href="http://msdn.microsoft.com/en-us/library/c401y1kb(VS.80).aspx">explicit-specialization</a> of that type for the value <strong><em>true</em></strong>. However, the same for <strong><em>false</em></strong> is not provided. This means that <font face="Courier New">sizeof(STATIC_ASSERT_FAILURE&lt;<strong>true</strong>&gt;)</font> is valid but <font face="Courier New">sizeof(STATIC_ASSERT_FAILURE&lt;<strong>false</strong>&gt;)</font> is not. This can be used to create a compile time assert as follows </p>

<pre class="code"><span style="background: black; color: #9595ff">namespace </span><span style="background: black; color: white">static_assert
</span><span style="background: black; color: cyan">{
    </span><span style="background: black; color: #9595ff">template </span><span style="background: black; color: cyan">&lt;</span><span style="background: black; color: #9595ff">bool</span><span style="background: black; color: cyan">&gt; </span><span style="background: black; color: #9595ff">struct </span><span style="background: black; color: white">STATIC_ASSERT_FAILURE</span><span style="background: black; color: cyan">;
    </span><span style="background: black; color: #9595ff">template </span><span style="background: black; color: cyan">&lt;&gt; </span><span style="background: black; color: #9595ff">struct </span><span style="background: black; color: white">STATIC_ASSERT_FAILURE</span><span style="background: black; color: cyan">&lt;</span><span style="background: black; color: #9595ff">true</span><span style="background: black; color: cyan">&gt; { </span><span style="background: black; color: #9595ff">enum </span><span style="background: black; color: cyan">{ </span><span style="background: black; color: white">value </span><span style="background: black; color: cyan">= </span><span style="background: black; color: white">1 </span><span style="background: black; color: cyan">}; };

    </span><span style="background: black; color: #9595ff">template</span><span style="background: black; color: cyan">&lt;</span><span style="background: black; color: #9595ff">int </span><span style="background: black; color: white">x</span><span style="background: black; color: cyan">&gt; </span><span style="background: black; color: #9595ff">struct </span><span style="background: black; color: white">static_assert_test</span><span style="background: black; color: cyan">{};
}

</span><span style="background: black; color: blue">#define </span><span style="background: black; color: white">COMPILE_ASSERT</span><span style="background: black; color: cyan">(</span><span style="background: black; color: white">x</span><span style="background: black; color: cyan">) </span><span style="background: black; color: white">\
    </span><span style="background: black; color: #9595ff">typedef </span><span style="background: black; color: cyan">::</span><span style="background: black; color: white">static_assert</span><span style="background: black; color: cyan">::</span><span style="background: black; color: white">static_assert_test</span><span style="background: black; color: cyan">&lt;</span><span style="background: black; color: white">\
        </span><span style="background: black; color: #9595ff">sizeof</span><span style="background: black; color: cyan">(::</span><span style="background: black; color: white">static_assert</span><span style="background: black; color: cyan">::</span><span style="background: black; color: white">STATIC_ASSERT_FAILURE</span><span style="background: black; color: cyan">&lt; (</span><span style="background: black; color: #9595ff">bool</span><span style="background: black; color: cyan">)( </span><span style="background: black; color: white">x </span><span style="background: black; color: cyan">) &gt;)&gt;</span><span style="background: black; color: white">\
            </span><span style="background: black; color: white">_static_assert_typedef_</span></pre>
<a href="http://11011.net/software/vspaste"></a>

<p>Here the error we get is as follows</p>

<pre class="code"><span style="background: black; color: #00c100">// compiles fine
</span><span style="background: black; color: white">COMPILE_ASSERT</span><span style="background: black; color: cyan">(</span><span style="background: black; color: #9595ff">sizeof</span><span style="background: black; color: cyan">(</span><span style="background: black; color: #9595ff">int</span><span style="background: black; color: cyan">) == </span><span style="background: black; color: #9595ff">sizeof</span><span style="background: black; color: cyan">(</span><span style="background: black; color: #9595ff">unsigned</span><span style="background: black; color: cyan">)); 
</span><span style="background: black; color: #00c100">// error C2027: use of undefined type 'static_assert::STATIC_ASSERT_FAILURE&lt;__formal&gt;
</span><span style="background: black; color: white">COMPILE_ASSERT</span><span style="background: black; color: cyan">(</span><span style="background: black; color: #9595ff">sizeof</span><span style="background: black; color: cyan">(</span><span style="background: black; color: #9595ff">int</span><span style="background: black; color: cyan">) == </span><span style="background: black; color: #9595ff">sizeof</span><span style="background: black; color: cyan">(</span><span style="background: black; color: #9595ff">char</span><span style="background: black; color: cyan">)); </span></pre>

<p>So the advantage is that the STATIC_ASSERT_FAILURE is called out right at the point of failure and is more obvious to figure out</p>

<p>The macro expansion is as follows</p>

<ol>
  <li>typedef static_assert_test&lt; sizeof(STATIC_ASSERT_FAILURE&lt;<strong>false</strong>&gt;) &gt;&#160; _static_assert_typedef_ </li>

  <li>typedef static_assert_test&lt; sizeof(<strong>incomplete type) </strong>&gt;&#160; _static_assert_typedef_ </li>
</ol>

<p>Similarly for true the type is not incomplete and the expansion is</p>

<ol>
  <li>typedef static_assert_test&lt; sizeof(STATIC_ASSERT_FAILURE&lt;<strong>true</strong>&gt;) &gt;&#160; _static_assert_typedef_ </li>

  <li>typedef static_assert_test&lt; <strong>sizeof(valid type with one enum member)</strong> &gt;&#160; _static_assert_typedef_ </li>

  <li>typedef static_assert_test&lt; 1 &gt; _static_assert_typedef_ </li>
</ol>

<p><strong>Put it all together</strong></p>

<p>All together the following source gives a good working point to create static or compile time assert that works for both C and C++</p>

<pre class="code"><span style="background: black; color: blue">#ifdef </span><span style="background: black; color: white">__cplusplus

</span><span style="background: black; color: blue">#define </span><span style="background: black; color: white">JOIN</span><span style="background: black; color: cyan">( </span><span style="background: black; color: white">X</span><span style="background: black; color: cyan">, </span><span style="background: black; color: white">Y </span><span style="background: black; color: cyan">) </span><span style="background: black; color: white">JOIN2</span><span style="background: black; color: cyan">(</span><span style="background: black; color: white">X</span><span style="background: black; color: cyan">,</span><span style="background: black; color: white">Y</span><span style="background: black; color: cyan">)
</span><span style="background: black; color: blue">#define </span><span style="background: black; color: white">JOIN2</span><span style="background: black; color: cyan">( </span><span style="background: black; color: white">X</span><span style="background: black; color: cyan">, </span><span style="background: black; color: white">Y </span><span style="background: black; color: cyan">) </span><span style="background: black; color: white">X</span><span style="background: black; color: cyan">##</span><span style="background: black; color: white">Y

</span><span style="background: black; color: #9595ff">namespace </span><span style="background: black; color: white">static_assert
</span><span style="background: black; color: cyan">{
    </span><span style="background: black; color: #9595ff">template </span><span style="background: black; color: cyan">&lt;</span><span style="background: black; color: #9595ff">bool</span><span style="background: black; color: cyan">&gt; </span><span style="background: black; color: #9595ff">struct </span><span style="background: black; color: white">STATIC_ASSERT_FAILURE</span><span style="background: black; color: cyan">;
    </span><span style="background: black; color: #9595ff">template </span><span style="background: black; color: cyan">&lt;&gt; </span><span style="background: black; color: #9595ff">struct </span><span style="background: black; color: white">STATIC_ASSERT_FAILURE</span><span style="background: black; color: cyan">&lt;</span><span style="background: black; color: #9595ff">true</span><span style="background: black; color: cyan">&gt; { </span><span style="background: black; color: #9595ff">enum </span><span style="background: black; color: cyan">{ </span><span style="background: black; color: white">value </span><span style="background: black; color: cyan">= </span><span style="background: black; color: white">1 </span><span style="background: black; color: cyan">}; };

    </span><span style="background: black; color: #9595ff">template</span><span style="background: black; color: cyan">&lt;</span><span style="background: black; color: #9595ff">int </span><span style="background: black; color: white">x</span><span style="background: black; color: cyan">&gt; </span><span style="background: black; color: #9595ff">struct </span><span style="background: black; color: white">static_assert_test</span><span style="background: black; color: cyan">{};
}

</span><span style="background: black; color: blue">#define </span><span style="background: black; color: white">COMPILE_ASSERT</span><span style="background: black; color: cyan">(</span><span style="background: black; color: white">x</span><span style="background: black; color: cyan">) </span><span style="background: black; color: white">\
    </span><span style="background: black; color: #9595ff">typedef </span><span style="background: black; color: cyan">::</span><span style="background: black; color: white">static_assert</span><span style="background: black; color: cyan">::</span><span style="background: black; color: white">static_assert_test</span><span style="background: black; color: cyan">&lt;</span><span style="background: black; color: white">\
        </span><span style="background: black; color: #9595ff">sizeof</span><span style="background: black; color: cyan">(::</span><span style="background: black; color: white">static_assert</span><span style="background: black; color: cyan">::</span><span style="background: black; color: white">STATIC_ASSERT_FAILURE</span><span style="background: black; color: cyan">&lt; (</span><span style="background: black; color: #9595ff">bool</span><span style="background: black; color: cyan">)( </span><span style="background: black; color: white">x </span><span style="background: black; color: cyan">) &gt;)&gt;</span><span style="background: black; color: white">\
            JOIN</span><span style="background: black; color: cyan">(</span><span style="background: black; color: white">_static_assert_typedef</span><span style="background: black; color: cyan">, </span><span style="background: black; color: white">__LINE__</span><span style="background: black; color: cyan">)

</span><span style="background: black; color: blue">#else </span><span style="background: black; color: #00c100">// __cplusplus

</span><span style="background: black; color: gray">#define COMPILE_ASSERT(x) extern int __dummy[(int)x]

</span><span style="background: black; color: blue">#endif </span><span style="background: black; color: #00c100">// __cplusplus

</span><span style="background: black; color: blue">#define </span><span style="background: black; color: white">VERIFY_EXPLICIT_CAST</span><span style="background: black; color: cyan">(</span><span style="background: black; color: white">from</span><span style="background: black; color: cyan">, </span><span style="background: black; color: white">to</span><span style="background: black; color: cyan">) </span><span style="background: black; color: white">COMPILE_ASSERT</span><span style="background: black; color: cyan">(</span><span style="background: black; color: #9595ff">sizeof</span><span style="background: black; color: cyan">(</span><span style="background: black; color: white">from</span><span style="background: black; color: cyan">) == </span><span style="background: black; color: #9595ff">sizeof</span><span style="background: black; color: cyan">(</span><span style="background: black; color: white">to</span><span style="background: black; color: cyan">)) 

</span><span style="background: black; color: blue">#endif </span><span style="background: black; color: #00c100">// _COMPILE_ASSERT_H_</span></pre>
<a href="http://11011.net/software/vspaste"></a>

<p>The only extra part is the JOIN macros. They just ensure that the typedef is using new names each time and doesn't give type already exists errors.</p>

<p><strong>More Reading</strong></p>

<ol>
  <li>Boost static_assert has an even better implementation that takes cares of much more scenarios and compiler quirks. Head over to the source at <a title="http://www.boost.org/doc/libs/1_36_0/boost/static_assert.hpp" href="http://www.boost.org/doc/libs/1_36_0/boost/static_assert.hpp">http://www.boost.org/doc/libs/1_36_0/boost/static_assert.hpp</a></li>

  <li><a href="http://www.amazon.com/Modern-Design-Programming-Patterns-Depth/dp/0201704315">Modern C++ Design</a> by the famed Andrei Alexandrescu</li>
</ol></div>
    <div class="post-attachment-viewer">
		
    </div>
    <div class="post-actions">
        <div class="navigation-list-header"></div>
        <ul class="navigation-list">
            
            <li class="navigation-item"><a class="internal-link view-replies" href="/b/abhinaba/archive/2008/10/27/c-c-compile-time-asserts.aspx#comments"><span></span>5 Comments</a></li>
            
            
        </ul>
        <div class="navigation-list-footer"></div>
    </div>
    <div class="post-tags"></div>
</div>
<div class="full-post-footer"></div></div>
<div class="content-fragment-footer"></div>
<div class="content-fragment-bottom fiji-content-fragment-bottom"><div class="r1 fiji-r1"></div><div class="r2 fiji-r2"></div><div class="r3 fiji-r3"></div><div class="r4 fiji-r4"></div></div></div></div>
<div class="content-fragment social-media-sharing no-wrapper" id="fragment-32170">
<div class="content-fragment-inner fiji-content-fragment-inner"><div class="content-fragment-top fiji-content-fragment-top"><div class="r1 fiji-r1"></div><div class="r2 fiji-r2"></div><div class="r3 fiji-r3"></div><div class="r4 fiji-r4"></div></div><div class="content-fragment-content">

<link href="/CustomWidgets/SocialMediaSharingUC/resources/sharethis.css" rel="stylesheet" type="text/css" /> 
<script src="/CustomWidgets/SocialMediaSharingUC/resources/ShareThis.js" type="text/javascript"></script>
<div class="ShareThisMainPanel">
	<div id="ctl00_content_ctl00_fragment_32170_ctl01_751dc2cb_a78d_4a61_a571_633a27e85e75" class="ShareThis_ChildRootPanel" onmouseover="ShareThisChildRootPanelOnmouseOver(this.id);" onmouseout="ShareThisChildRootPanelOnmouseOut(this.id);">
		<div id="ctl00_content_ctl00_fragment_32170_ctl01_ShareThisBtnCollPanel_dfa16512cef64d58a7d69ef609d01f9a" class="tierOnePanel">
			<div class="buttonPanel"></div>
		</div>
	</div>
</div>
</div>
</div></div>
<div class="content-fragment blog-feedback-list no-wrapper" id="fragment-32171"><div class="content-fragment-inner fiji-content-fragment-inner"><div class="content-fragment-content"><div id="ctl00_content_ctl00_fragment_32171_ctl01_ctl00_ctl02_ctl05_DelayedFeedbackList">
  <div class="content-list-header"></div>
				    <div class="content-list-name">
					    
							    <a class="internal-link rss" href="/b/abhinaba/rsscomments.aspx"><span></span></a>				    </div>
				    <ul class="content-list">
			    
				    
						    <li class="content-item">
							    <div class="full-post-outer fiji-full-post-outer"><div class="full-post-header"><div class="r fiji-r"></div></div>
							    <div class="full-post"><div class="full-post-inner fiji-full-post-inner">
					    
				    <div class="post-author"><span class="user-name">Norman Diamond</span>				    </div>
				    <div class="post-date">
					    <span class="value">27 Oct 2008 3:14 AM</span>
				    </div>
				    <div class="post-content user-defined-markup"><p>The biggest advantage to this technique is that it will help catch bugs when building release builds as well as debug builds.</p>
<p>This makes me think that use of the standard preprocessor-time &quot;assert&quot; macro should output a warning at compile time, &quot;Are you sure you can't make this a compile-time assert instead?&quot;</p>
<div style="clear:both;"></div></div>
				    <div class="post-actions">
					    
				    </div>
				    
							    </div>
							    </div><div class="full-post-footer"><div class="r fiji-r"></div></div></div>
						    </li>
					    
			    
				    
						    <li class="content-item user-is-author">
							    <div class="full-post-outer fiji-full-post-outer"><div class="full-post-header user-is-author"><div class="r fiji-r"></div></div>
							    <div class="full-post user-is-author"><div class="full-post-inner fiji-full-post-inner">
					    
				    <div class="post-author"><span class="user-name"><a class="internal-link view-user-profile" href="/members/abhinaba/"><span></span>abhinaba</a></span>				    </div>
				    <div class="post-date">
					    <span class="value">27 Oct 2008 3:43 AM</span>
				    </div>
				    <div class="post-content user-defined-markup"><p>Next C++ specification C++0x will have compile time assert built in. So maybe then we can think about this....</p>
<div style="clear:both;"></div></div>
				    <div class="post-actions">
					    
				    </div>
				    
							    </div>
							    </div><div class="full-post-footer user-is-author"><div class="r fiji-r"></div></div></div>
						    </li>
					    
			    
				    
						    <li class="content-item">
							    <div class="full-post-outer fiji-full-post-outer"><div class="full-post-header"><div class="r fiji-r"></div></div>
							    <div class="full-post"><div class="full-post-inner fiji-full-post-inner">
					    
				    <div class="post-author"><span class="user-name"><a class="internal-link view-user-profile" href="/members/int19h/"><span></span>int19h</a></span>				    </div>
				    <div class="post-date">
					    <span class="value">27 Oct 2008 6:20 AM</span>
				    </div>
				    <div class="post-content user-defined-markup"><p>&gt; #define COMPILE_ASSERT(x) extern int __dummy[(int)x]</p>
<p>Careful here. This will also fail for all x&lt;0, which are treated as &quot;true&quot; in C/C++ normally.</p>
<div style="clear:both;"></div></div>
				    <div class="post-actions">
					    
				    </div>
				    
							    </div>
							    </div><div class="full-post-footer"><div class="r fiji-r"></div></div></div>
						    </li>
					    
			    
				    
						    <li class="content-item">
							    <div class="full-post-outer fiji-full-post-outer"><div class="full-post-header"><div class="r fiji-r"></div></div>
							    <div class="full-post"><div class="full-post-inner fiji-full-post-inner">
					    
				    <div class="post-author"><span class="user-name">Naja</span>				    </div>
				    <div class="post-date">
					    <span class="value">10 Nov 2010 9:54 AM</span>
				    </div>
				    <div class="post-content user-defined-markup"><p>the answer to that last comment is COMPILE_ASSERT( x != 0 )</p>
<div style="clear:both;"></div></div>
				    <div class="post-actions">
					    
				    </div>
				    
							    </div>
							    </div><div class="full-post-footer"><div class="r fiji-r"></div></div></div>
						    </li>
					    
			    
				    
						    <li class="content-item">
							    <div class="full-post-outer fiji-full-post-outer"><div class="full-post-header"><div class="r fiji-r"></div></div>
							    <div class="full-post"><div class="full-post-inner fiji-full-post-inner">
					    
				    <div class="post-author"><span class="user-name">naja</span>				    </div>
				    <div class="post-date">
					    <span class="value">10 Nov 2010 9:59 AM</span>
				    </div>
				    <div class="post-content user-defined-markup"><p>sorry, I wrote an error myself there. What I meant was:</p>
<p>#define COMPILE_ASSERT(x) extern int __dummy[ (int) x!=0 ]</p>
<p>btw the failing is the good part actually, imagine passing a big number to that macro, ahem... might turn your compile time check into a run time memory hog...</p>
<div style="clear:both;"></div></div>
				    <div class="post-actions">
					    
				    </div>
				    
							    </div>
							    </div><div class="full-post-footer"><div class="r fiji-r"></div></div></div>
						    </li>
					    
			    
				    </ul>
				    <div class="content-list-footer"></div>
			     
		    <div class="pager">		    </div>
		</div>
	</div>
</div></div>
</div>
</div>
</div>
</div></div>

			</form>
	
        <script type="text/javascript">$('div.breadcrumb-list span:last a').addClass('last');</script>
	</body>
</html>
